{"ast":null,"code":"var _jsxFileName = \"E:\\\\MERN-Project\\\\frontend\\\\src\\\\App.tsx\";\nimport React from 'react';\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport GetSong from './components/GetSong';\nimport AddSong from './components/AddSong';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  // const dispatch = useDispatch();\n  // const songs = useSelector((state: rootState) => state.songs.songs);\n\n  // useEffect(() => {\n  //   dispatch(getSongsFetch());\n  // }, [dispatch]);\n\n  // const handleAddSong = () => {\n  //   // Dispatch the addSongFetch action when you want to add a new song\n  //   dispatch(addSongFetch(/* newSongData */));\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GetSong, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddSong, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","GetSong","AddSong","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/MERN-Project/frontend/src/App.tsx"],"sourcesContent":["import React from 'react';\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getSongsFetch, addSongFetch  } from './songState/songsState';\r\nimport { useEffect } from \"react\";\r\nimport { rootState } from './songState/songsState';\r\nimport GetSong from './components/GetSong';\r\nimport AddSong from './components/AddSong';\r\n\r\nconst App = () => {\r\n  // const dispatch = useDispatch();\r\n  // const songs = useSelector((state: rootState) => state.songs.songs);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(getSongsFetch());\r\n  // }, [dispatch]);\r\n\r\n  // const handleAddSong = () => {\r\n  //   // Dispatch the addSongFetch action when you want to add a new song\r\n  //   dispatch(addSongFetch(/* newSongData */));\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <GetSong />\r\n      \r\n      <AddSong />\r\n      {/* <AddSong /> */}\r\n      {/* <button onClick={handleAddSong}>Add Song</button> */}\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAKA,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAChB;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA,CAACH,OAAO;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEXR,OAAA,CAACF,OAAO;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAIX,CAAC;AAEP,CAAC;AAACC,EAAA,GAvBIN,GAAG;AAyBT,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}