{"ast":null,"code":"var _jsxFileName = \"E:\\\\MERN-Project\\\\frontend\\\\src\\\\components\\\\GetSong.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\nimport { getSongsFetch, addSongFetch, editSongFetch, deleteSongFetch } from '../songState/songsState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetSong = () => {\n  _s();\n  var _songs$index;\n  const dispatch = useDispatch();\n  const songs = useSelector(state => state.songs.songs);\n  const [distinctData, setDistinctData] = useState({});\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const handleButtonClick = category => {\n    setSelectedCategory(prevCategory => prevCategory === category ? null : category);\n    dispatch(getSongsFetch());\n  };\n  const handleAddSong = () => {\n    const newSong = {\n      title: 'New Song',\n      artist: 'New Artist',\n      album: 'New Album',\n      genre: 'New Genre'\n    };\n    dispatch(addSongFetch(newSong));\n  };\n  const handleEditSong = (index, field, newValue) => {\n    const editedSong = {\n      ...songs[index],\n      [field]: newValue\n    };\n    dispatch(editSongFetch(editedSong)); // Pass the edited song only\n  };\n  const songId = (_songs$index = songs[index]) === null || _songs$index === void 0 ? void 0 : _songs$index._id;\n  if (songId) {\n    dispatch(deleteSongFetch(songId));\n  }\n  useEffect(() => {\n    if (songs && selectedCategory) {\n      const uniqueData = {\n        title: new Set(),\n        artist: new Set(),\n        album: new Set(),\n        genre: new Set()\n      };\n      songs.forEach(item => {\n        uniqueData.title.add(item.title);\n        uniqueData.artist.add(item.artist);\n        uniqueData.album.add(item.album);\n        uniqueData.genre.add(item.genre);\n      });\n      setDistinctData({\n        title: Array.from(uniqueData.title),\n        artist: Array.from(uniqueData.artist),\n        album: Array.from(uniqueData.album),\n        genre: Array.from(uniqueData.genre)\n      });\n    }\n  }, [songs, selectedCategory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('title'),\n      children: selectedCategory === 'title' ? 'Undo' : 'Titles'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('artist'),\n      children: selectedCategory === 'artist' ? 'Undo' : 'Artists'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('album'),\n      children: selectedCategory === 'album' ? 'Undo' : 'Albums'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('genre'),\n      children: selectedCategory === 'genre' ? 'Undo' : 'Genres'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), selectedCategory && distinctData[selectedCategory] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), distinctData[selectedCategory].map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faMusic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this), \"\\uD83C\\uDFB5 \", item, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditSong(index, selectedCategory, 'New Value'),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteSong(index),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddSong,\n      children: \"Add Song\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(GetSong, \"cuXfROrdLLozzC9hAxGEmUImB/A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GetSong;\nexport default GetSong;\nvar _c;\n$RefreshReg$(_c, \"GetSong\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","FontAwesomeIcon","faMusic","getSongsFetch","addSongFetch","editSongFetch","deleteSongFetch","jsxDEV","_jsxDEV","GetSong","_s","_songs$index","dispatch","songs","state","distinctData","setDistinctData","selectedCategory","setSelectedCategory","handleButtonClick","category","prevCategory","handleAddSong","newSong","title","artist","album","genre","handleEditSong","index","field","newValue","editedSong","songId","_id","uniqueData","Set","forEach","item","add","Array","from","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","charAt","toUpperCase","slice","map","icon","handleDeleteSong","_c","$RefreshReg$"],"sources":["E:/MERN-Project/frontend/src/components/GetSong.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n  getSongsFetch,\r\n  addSongFetch,\r\n  editSongFetch,\r\n  deleteSongFetch,\r\n  rootState,\r\n  SongType,\r\n} from '../songState/songsState';\r\n\r\nconst GetSong: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const songs = useSelector((state: rootState) => state.songs.songs);\r\n  const [distinctData, setDistinctData] = useState<{ [key: string]: string[] }>({});\r\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\r\n\r\n  const handleButtonClick = (category: string) => {\r\n    setSelectedCategory((prevCategory) => (prevCategory === category ? null : category));\r\n    dispatch(getSongsFetch());\r\n  };\r\n\r\n  const handleAddSong = () => {\r\n    const newSong: SongType = {\r\n      title: 'New Song',\r\n      artist: 'New Artist',\r\n      album: 'New Album',\r\n      genre: 'New Genre',\r\n    };\r\n\r\n    dispatch(addSongFetch(newSong));\r\n  };\r\n\r\n  const handleEditSong = (index: number, field: string, newValue: string) => {\r\n    const editedSong: SongType = { ...songs[index], [field]: newValue };\r\n    dispatch(editSongFetch(editedSong)); // Pass the edited song only\r\n  };\r\n  \r\n  const songId = songs[index]?._id;\r\n  if (songId) {\r\n    dispatch(deleteSongFetch(songId));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (songs && selectedCategory) {\r\n      const uniqueData: { [key: string]: Set<string> } = {\r\n        title: new Set<string>(),\r\n        artist: new Set<string>(),\r\n        album: new Set<string>(),\r\n        genre: new Set<string>(),\r\n      };\r\n\r\n      songs.forEach((item:any) => {\r\n        uniqueData.title.add(item.title);\r\n        uniqueData.artist.add(item.artist);\r\n        uniqueData.album.add(item.album);\r\n        uniqueData.genre.add(item.genre);\r\n      });\r\n\r\n      setDistinctData({\r\n        title: Array.from(uniqueData.title),\r\n        artist: Array.from(uniqueData.artist),\r\n        album: Array.from(uniqueData.album),\r\n        genre: Array.from(uniqueData.genre),\r\n      });\r\n    }\r\n  }, [songs, selectedCategory]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => handleButtonClick('title')}>\r\n        {selectedCategory === 'title' ? 'Undo' : 'Titles'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('artist')}>\r\n        {selectedCategory === 'artist' ? 'Undo' : 'Artists'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('album')}>\r\n        {selectedCategory === 'album' ? 'Undo' : 'Albums'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('genre')}>\r\n        {selectedCategory === 'genre' ? 'Undo' : 'Genres'}\r\n      </button>\r\n\r\n      {selectedCategory && distinctData[selectedCategory] && (\r\n        <div>\r\n          <h2>{selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)}:</h2>\r\n          {distinctData[selectedCategory].map((item, index) => (\r\n            <div key={index}>\r\n              <FontAwesomeIcon icon={faMusic} />ðŸŽµ {item}\r\n              <button onClick={() => handleEditSong(index, selectedCategory, 'New Value')}>\r\n                Edit\r\n              </button>\r\n              <button onClick={() => handleDeleteSong(index)}>Delete</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      <button onClick={handleAddSong}>Add Song</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetSong;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}