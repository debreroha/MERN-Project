{"ast":null,"code":"import { call, all, put, takeEvery } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { getSongsSuccess, getSongsFailure, addSongSuccess, addSongFailure } from '../songState/songsState';\nconst baseUrl = 'http://localhost:5000/api';\nexport const getAllSongs = () => {\n  return axios.get(`${baseUrl}/songs`);\n};\nexport const addSongToApi = newSong => {\n  return axios.post(`${baseUrl}/songs/add`, newSong);\n};\nfunction* getSongs() {\n  try {\n    const response = yield call(getAllSongs);\n    const songs = response.data;\n    yield put(getSongsSuccess(songs));\n  } catch (e) {\n    yield put(getSongsFailure(e.message));\n  }\n}\nfunction* addSongSaga(action) {\n  try {\n    const response = yield call(addSongToApi, action.payload);\n    const addedSong = response.data;\n    yield put(addSongSuccess(addedSong));\n  } catch (e) {\n    yield put(addSongFailure(e.message));\n  }\n}\nexport function* rootSaga() {\n  yield all([takeEvery('songs/getSongsFetch', getSongs), takeEvery('songs/addSongFetch', addSongSaga)]);\n}","map":{"version":3,"names":["call","all","put","takeEvery","axios","getSongsSuccess","getSongsFailure","addSongSuccess","addSongFailure","baseUrl","getAllSongs","get","addSongToApi","newSong","post","getSongs","response","songs","data","e","message","addSongSaga","action","payload","addedSong","rootSaga"],"sources":["D:/MERN Stack/frontend/src/saga/sagas.tsx"],"sourcesContent":["import { call, all, put, takeEvery } from 'redux-saga/effects';\r\nimport { AxiosResponse } from 'axios';\r\nimport { SongType, SongActionType } from '../songState/songsState';\r\nimport axios from 'axios';\r\nimport {\r\n  getSongsSuccess,\r\n  getSongsFailure,\r\n  addSongSuccess,\r\n  addSongFailure,\r\n} from '../songState/songsState';\r\n\r\nconst baseUrl = 'http://localhost:5000/api';\r\n\r\nexport const getAllSongs = (): Promise<AxiosResponse<SongType[]>> => {\r\n  return axios.get<SongType[]>(`${baseUrl}/songs`);\r\n};\r\n\r\nexport const addSongToApi = (newSong: SongType): Promise<AxiosResponse<SongType>> => {\r\n  return axios.post<SongType>(`${baseUrl}/songs/add`, newSong);\r\n};\r\n\r\nfunction* getSongs() {\r\n  try {\r\n    const response: AxiosResponse<SongType[]> = yield call(getAllSongs);\r\n    const songs: SongType[] = response.data;\r\n    yield put(getSongsSuccess(songs));\r\n  } catch (e: any) {\r\n    yield put(getSongsFailure(e.message));\r\n  }\r\n}\r\n\r\nfunction* addSongSaga(action: SongActionType) {\r\n  try {\r\n    const response: AxiosResponse<SongType> = yield call(addSongToApi, action.payload);\r\n    const addedSong: SongType = response.data;\r\n    yield put(addSongSuccess(addedSong));\r\n  } catch (e: any) {\r\n    yield put(addSongFailure(e.message));\r\n  }\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([takeEvery('songs/getSongsFetch', getSongs), takeEvery('songs/addSongFetch', addSongSaga)]);\r\n}"],"mappings":"AAAA,SAASA,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,SAAS,QAAQ,oBAAoB;AAG9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SACEC,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,cAAc,QACT,yBAAyB;AAEhC,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAA0C;EACnE,OAAON,KAAK,CAACO,GAAG,CAAc,GAAEF,OAAQ,QAAO,CAAC;AAClD,CAAC;AAED,OAAO,MAAMG,YAAY,GAAIC,OAAiB,IAAuC;EACnF,OAAOT,KAAK,CAACU,IAAI,CAAY,GAAEL,OAAQ,YAAW,EAAEI,OAAO,CAAC;AAC9D,CAAC;AAED,UAAUE,QAAQA,CAAA,EAAG;EACnB,IAAI;IACF,MAAMC,QAAmC,GAAG,MAAMhB,IAAI,CAACU,WAAW,CAAC;IACnE,MAAMO,KAAiB,GAAGD,QAAQ,CAACE,IAAI;IACvC,MAAMhB,GAAG,CAACG,eAAe,CAACY,KAAK,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOE,CAAM,EAAE;IACf,MAAMjB,GAAG,CAACI,eAAe,CAACa,CAAC,CAACC,OAAO,CAAC,CAAC;EACvC;AACF;AAEA,UAAUC,WAAWA,CAACC,MAAsB,EAAE;EAC5C,IAAI;IACF,MAAMN,QAAiC,GAAG,MAAMhB,IAAI,CAACY,YAAY,EAAEU,MAAM,CAACC,OAAO,CAAC;IAClF,MAAMC,SAAmB,GAAGR,QAAQ,CAACE,IAAI;IACzC,MAAMhB,GAAG,CAACK,cAAc,CAACiB,SAAS,CAAC,CAAC;EACtC,CAAC,CAAC,OAAOL,CAAM,EAAE;IACf,MAAMjB,GAAG,CAACM,cAAc,CAACW,CAAC,CAACC,OAAO,CAAC,CAAC;EACtC;AACF;AAEA,OAAO,UAAUK,QAAQA,CAAA,EAAG;EAC1B,MAAMxB,GAAG,CAAC,CAACE,SAAS,CAAC,qBAAqB,EAAEY,QAAQ,CAAC,EAAEZ,SAAS,CAAC,oBAAoB,EAAEkB,WAAW,CAAC,CAAC,CAAC;AACvG"},"metadata":{},"sourceType":"module","externalDependencies":[]}