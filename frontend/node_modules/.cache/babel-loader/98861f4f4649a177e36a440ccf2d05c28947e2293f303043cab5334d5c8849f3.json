{"ast":null,"code":"var _jsxFileName = \"E:\\\\MERN-Project\\\\frontend\\\\src\\\\components\\\\GetSong.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\nimport { getSongsFetch, addSongFetch, editSongFetch, deleteSongFetch } from '../songState/songsState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetSong = () => {\n  _s();\n  const dispatch = useDispatch();\n  const songs = useSelector(state => state.songs.songs);\n  const [distinctData, setDistinctData] = useState({});\n  const [selectedCategory, setSelectedCategory] = useState(null);\n  const handleButtonClick = category => {\n    setSelectedCategory(selectedCategory === category ? null : category);\n    dispatch(getSongsFetch());\n  };\n  const addSong = value => {\n    dispatch(addSongFetch({\n      [selectedCategory]: value\n    }));\n  };\n  const editSong = (originalValue, newValue) => {\n    const songToUpdate = songs.find(song => song[selectedCategory] === originalValue);\n    if (songToUpdate) {\n      const updatedSong = {\n        ...songToUpdate,\n        [selectedCategory]: newValue\n      };\n      dispatch(editSongFetch(updatedSong));\n    }\n  };\n  const deleteSong = value => {\n    const songToDelete = songs.find(song => song[selectedCategory] === value);\n    if (songToDelete) {\n      dispatch(deleteSongFetch(songToDelete._id));\n    }\n  };\n  useEffect(() => {\n    if (songs && selectedCategory) {\n      const uniqueData = {\n        title: new Set(),\n        artist: new Set(),\n        album: new Set(),\n        genre: new Set()\n      };\n      songs.forEach(item => {\n        uniqueData.title.add(item.title);\n        uniqueData.artist.add(item.artist);\n        uniqueData.album.add(item.album);\n        uniqueData.genre.add(item.genre);\n      });\n      setDistinctData({\n        title: Array.from(uniqueData.title),\n        artist: Array.from(uniqueData.artist),\n        album: Array.from(uniqueData.album),\n        genre: Array.from(uniqueData.genre)\n      });\n    }\n  }, [songs, selectedCategory]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('title'),\n      children: selectedCategory === 'title' ? 'Undo' : 'Titles'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('artist'),\n      children: selectedCategory === 'artist' ? 'Undo' : 'Artists'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('album'),\n      children: selectedCategory === 'album' ? 'Undo' : 'Albums'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleButtonClick('genre'),\n      children: selectedCategory === 'genre' ? 'Undo' : 'Genres'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), selectedCategory && distinctData[selectedCategory] && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), distinctData[selectedCategory].map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faMusic\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), \" \", item, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addSong(item),\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => editSong(item, 'NewValue'),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteSong(item),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(GetSong, \"cuXfROrdLLozzC9hAxGEmUImB/A=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GetSong;\nexport default GetSong;\nvar _c;\n$RefreshReg$(_c, \"GetSong\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","FontAwesomeIcon","faMusic","getSongsFetch","addSongFetch","editSongFetch","deleteSongFetch","jsxDEV","_jsxDEV","GetSong","_s","dispatch","songs","state","distinctData","setDistinctData","selectedCategory","setSelectedCategory","handleButtonClick","category","addSong","value","editSong","originalValue","newValue","songToUpdate","find","song","updatedSong","deleteSong","songToDelete","_id","uniqueData","title","Set","artist","album","genre","forEach","item","add","Array","from","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","charAt","toUpperCase","slice","map","index","icon","_c","$RefreshReg$"],"sources":["E:/MERN-Project/frontend/src/components/GetSong.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\r\nimport { getSongsFetch, addSongFetch, editSongFetch, deleteSongFetch, RootState } from '../songState/songsState';\r\n\r\nconst GetSong: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const songs = useSelector((state: RootState) => state.songs.songs);\r\n  const [distinctData, setDistinctData] = useState<{ [key: string]: string[] }>({});\r\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\r\n\r\n  const handleButtonClick = (category: string) => {\r\n    setSelectedCategory(selectedCategory === category ? null : category);\r\n    dispatch(getSongsFetch());\r\n  };\r\n\r\n  const addSong = (value: string) => {\r\n    dispatch(addSongFetch({ [selectedCategory!]: value }));\r\n  };\r\n\r\n  const editSong = (originalValue: string, newValue: string) => {\r\n    const songToUpdate = songs.find((song) => song[selectedCategory as keyof typeof song] === originalValue);\r\n    if (songToUpdate) {\r\n      const updatedSong = { ...songToUpdate, [selectedCategory as keyof typeof song]: newValue };\r\n      dispatch(editSongFetch(updatedSong));\r\n    }\r\n  };\r\n\r\n  const deleteSong = (value: string) => {\r\n    const songToDelete = songs.find((song) => song[selectedCategory as keyof typeof song] === value);\r\n    if (songToDelete) {\r\n      dispatch(deleteSongFetch(songToDelete._id!));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (songs && selectedCategory) {\r\n      const uniqueData: { [key: string]: Set<string> } = {\r\n        title: new Set<string>(),\r\n        artist: new Set<string>(),\r\n        album: new Set<string>(),\r\n        genre: new Set<string>(),\r\n      };\r\n\r\n      songs.forEach((item) => {\r\n        uniqueData.title.add(item.title);\r\n        uniqueData.artist.add(item.artist);\r\n        uniqueData.album.add(item.album);\r\n        uniqueData.genre.add(item.genre);\r\n      });\r\n\r\n      setDistinctData({\r\n        title: Array.from(uniqueData.title),\r\n        artist: Array.from(uniqueData.artist),\r\n        album: Array.from(uniqueData.album),\r\n        genre: Array.from(uniqueData.genre),\r\n      });\r\n    }\r\n  }, [songs, selectedCategory]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => handleButtonClick('title')}>\r\n        {selectedCategory === 'title' ? 'Undo' : 'Titles'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('artist')}>\r\n        {selectedCategory === 'artist' ? 'Undo' : 'Artists'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('album')}>\r\n        {selectedCategory === 'album' ? 'Undo' : 'Albums'}\r\n      </button>\r\n\r\n      <button onClick={() => handleButtonClick('genre')}>\r\n        {selectedCategory === 'genre' ? 'Undo' : 'Genres'}\r\n      </button>\r\n\r\n      {selectedCategory && distinctData[selectedCategory] && (\r\n        <div>\r\n          <h2>{selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)}:</h2>\r\n\r\n          {distinctData[selectedCategory].map((item, index) => (\r\n            <div key={index}>\r\n              <FontAwesomeIcon icon={faMusic} /> {item}\r\n              <button onClick={() => addSong(item)}>Add</button>\r\n              <button onClick={() => editSong(item, 'NewValue')}>Edit</button>\r\n              <button onClick={() => deleteSong(item)}>Delete</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GetSong;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}