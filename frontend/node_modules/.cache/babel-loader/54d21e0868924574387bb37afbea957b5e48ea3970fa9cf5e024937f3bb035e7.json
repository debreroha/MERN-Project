{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n// import { SongsState } from \"./SongType\";\n\nconst isAddSongFetchAction = action => {\n  return action.type === 'ADD_SONG_FETCH';\n};\nconst initialState = {\n  songs: [],\n  isLoading: false,\n  errorMessage: null\n};\nexport const addSongFetch = createAsyncThunk(\"songs/addSongFetch\", async newSong => {\n  // your API call to add the new song to the database\n  // and return the new song object\n  // for example:\n  const response = await fetch(\"/api/songs/add\", {\n    method: \"POST\",\n    body: JSON.stringify(newSong),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const newSongFromAPI = await response.json();\n  return newSongFromAPI;\n});\nconst songsSlice = createSlice({\n  name: \"songs\",\n  initialState,\n  reducers: {\n    // get songs actions\n    getSongsFetch: state => {\n      state.isLoading = true;\n      state.errorMessage = null;\n    },\n    getSongsSuccess: (state, action) => {\n      state.isLoading = false;\n      state.songs = action.payload;\n    },\n    getSongsFailure: (state, action) => {\n      state.isLoading = false;\n      state.errorMessage = action.payload;\n    },\n    // add song actions\n    // addSongFetch: (state: SongsState) => {\n    //   state.isLoading = true;\n    //   state.errorMessage = null;\n    // },\n    // addSongSuccess: (state, action) => {\n    //   state.isLoading = false;\n    //   state.songs.push(action.payload);\n    // },\n    // addSongFailure: (state, action) => {\n    //   state.isLoading = false;\n    //   state.errorMessage = action.payload;\n    // },\n\n    // edit song actions\n    editSongFetch: state => {\n      state.isLoading = true;\n      state.errorMessage = null;\n    },\n    editSongSuccess: (state, action) => {\n      const updatedSong = action.payload;\n      const songIndex = state.songs.findIndex(song => song._id === updatedSong._id);\n      if (songIndex !== -1) {\n        state.songs[songIndex] = updatedSong;\n        state.isLoading = false;\n        state.errorMessage = null;\n      }\n    },\n    editSongFailure: (state, action) => {\n      state.isLoading = false;\n      state.errorMessage = action.payload;\n    },\n    // delete song actions\n    deleteSongFetch: state => {\n      state.isLoading = true;\n      state.errorMessage = null;\n    },\n    deleteSongSuccess: (state, action) => {\n      const songId = action.payload;\n      state.isLoading = false;\n      state.songs = state.songs.filter(song => song._id !== songId);\n      state.errorMessage = null;\n    },\n    deleteSongFailure: (state, action) => {\n      state.isLoading = false;\n      state.errorMessage = action.payload;\n    },\n    extraReducers: builder => {\n      builder.addCase(addSongFetch.pending, state => {\n        state.isLoading = true;\n        state.errorMessage = null;\n      }).addCase(addSongFetch.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.songs.push(action.payload);\n      }).addCase(addSongFetch.rejected, (state, action) => {\n        var _action$error;\n        state.isLoading = false;\n        state.errorMessage = ((_action$error = action.error) === null || _action$error === void 0 ? void 0 : _action$error.message) || 'Failed to add song';\n      });\n    }\n  }\n});\nexport const {\n  getSongsFetch,\n  getSongsSuccess,\n  getSongsFailure,\n  // addSongFetch,\n  // addSongSuccess,\n  // addSongFailure,\n  editSongFetch,\n  editSongSuccess,\n  editSongFailure,\n  deleteSongFetch,\n  deleteSongSuccess,\n  deleteSongFailure\n} = songsSlice.actions;\nexport default songsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","isAddSongFetchAction","action","type","initialState","songs","isLoading","errorMessage","addSongFetch","newSong","response","fetch","method","body","JSON","stringify","headers","newSongFromAPI","json","songsSlice","name","reducers","getSongsFetch","state","getSongsSuccess","payload","getSongsFailure","editSongFetch","editSongSuccess","updatedSong","songIndex","findIndex","song","_id","editSongFailure","deleteSongFetch","deleteSongSuccess","songId","filter","deleteSongFailure","extraReducers","builder","addCase","pending","fulfilled","push","rejected","_action$error","error","message","actions","reducer"],"sources":["D:/MERN Stack/frontend/src/songState/songsState.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n// import { SongsState } from \"./SongType\";\r\n\r\nexport interface SongType {\r\n    _id?: string;\r\n    title: string;\r\n    artist: string;\r\n    album: string;\r\n    genre: string;\r\n    createdAt?: Date;\r\n    updatedAt?: Date;\r\n  }\r\n  \r\n  export interface SongsState {\r\n    songs: SongType[];\r\n    isLoading: boolean;\r\n    errorMessage: string | null;\r\n  }\r\n  \r\n  export interface rootState {\r\n    songs: SongsState;\r\n  }\r\n  \r\n  export interface SongActionType {\r\n    type: string;\r\n    payload: SongType;\r\n  }\r\n  export interface AddSongFetchAction {\r\n    type: 'ADD_SONG_FETCH';\r\n  }\r\n\r\n  export interface SongActionType {\r\n    type: string; // change to string type\r\n    payload: SongType;\r\n  }\r\n\r\n  const isAddSongFetchAction = (action: any): action is AddSongFetchAction => {\r\n    return action.type === 'ADD_SONG_FETCH';\r\n  };\r\n\r\nconst initialState: SongsState = {\r\n  songs: [],\r\n  isLoading: false,\r\n  errorMessage: null,\r\n};\r\n\r\nexport const addSongFetch = createAsyncThunk<SongType, SongType>(\r\n  \"songs/addSongFetch\",\r\n  async (newSong: SongType) => {\r\n    // your API call to add the new song to the database\r\n    // and return the new song object\r\n    // for example:\r\n    const response = await fetch(\"/api/songs/add\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(newSong),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const newSongFromAPI = await response.json();\r\n    return newSongFromAPI;\r\n  }\r\n);\r\n\r\n\r\nconst songsSlice = createSlice({\r\n  name: \"songs\",\r\n  initialState,\r\n  reducers: {\r\n    // get songs actions\r\n    getSongsFetch: (state) => {\r\n      state.isLoading = true;\r\n      state.errorMessage = null;\r\n    },\r\n    getSongsSuccess: (state, action) => {\r\n      state.isLoading = false;\r\n      state.songs = action.payload;\r\n    },\r\n    getSongsFailure: (state, action) => {\r\n      state.isLoading = false;\r\n      state.errorMessage = action.payload;\r\n    },\r\n    // add song actions\r\n    // addSongFetch: (state: SongsState) => {\r\n    //   state.isLoading = true;\r\n    //   state.errorMessage = null;\r\n    // },\r\n    // addSongSuccess: (state, action) => {\r\n    //   state.isLoading = false;\r\n    //   state.songs.push(action.payload);\r\n    // },\r\n    // addSongFailure: (state, action) => {\r\n    //   state.isLoading = false;\r\n    //   state.errorMessage = action.payload;\r\n    // },\r\n\r\n    \r\n\r\n    // edit song actions\r\n    editSongFetch: (state) => {\r\n      state.isLoading = true;\r\n      state.errorMessage = null;\r\n    },\r\n    editSongSuccess: (state, action) => {\r\n      const updatedSong = action.payload;\r\n      const songIndex = state.songs.findIndex(\r\n        (song) => song._id === updatedSong._id\r\n      );\r\n\r\n      if (songIndex !== -1) {\r\n        state.songs[songIndex] = updatedSong;\r\n        state.isLoading = false;\r\n        state.errorMessage = null;\r\n      }\r\n    },\r\n    editSongFailure: (state, action) => {\r\n      state.isLoading = false;\r\n      state.errorMessage = action.payload;\r\n    },\r\n\r\n    // delete song actions\r\n    deleteSongFetch: (state) => {\r\n      state.isLoading = true;\r\n      state.errorMessage = null;\r\n    },\r\n    deleteSongSuccess: (state, action) => {\r\n      const songId = action.payload;\r\n      state.isLoading = false;\r\n      state.songs = state.songs.filter((song) => song._id !== songId);\r\n      state.errorMessage = null;\r\n    },\r\n    deleteSongFailure: (state, action) => {\r\n      state.isLoading = false;\r\n      state.errorMessage = action.payload;\r\n    },\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(addSongFetch.pending, (state) => {\r\n          state.isLoading = true;\r\n          state.errorMessage = null;\r\n        })\r\n        .addCase(addSongFetch.fulfilled, (state, action: { payload: SongType }) => {\r\n          state.isLoading = false;\r\n          state.songs.push(action.payload);\r\n        })\r\n        .addCase(addSongFetch.rejected, (state:any, action:any) => {\r\n          state.isLoading = false;\r\n          state.errorMessage = action.error?.message || 'Failed to add song';\r\n        })\r\n      },\r\n    \r\n  },\r\n});\r\n\r\nexport const {\r\n  getSongsFetch,\r\n  getSongsSuccess,\r\n  getSongsFailure,\r\n  // addSongFetch,\r\n  // addSongSuccess,\r\n  // addSongFailure,\r\n  editSongFetch,\r\n  editSongSuccess,\r\n  editSongFailure,\r\n  deleteSongFetch,\r\n  deleteSongSuccess,\r\n  deleteSongFailure,\r\n} = songsSlice.actions;\r\n\r\nexport default songsSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE;;AAmCE,MAAMC,oBAAoB,GAAIC,MAAW,IAAmC;EAC1E,OAAOA,MAAM,CAACC,IAAI,KAAK,gBAAgB;AACzC,CAAC;AAEH,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,KAAK;EAChBC,YAAY,EAAE;AAChB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGT,gBAAgB,CAC1C,oBAAoB,EACpB,MAAOU,OAAiB,IAAK;EAC3B;EACA;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,EAAE;IAC7CC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;IAC7BO,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMC,cAAc,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAC5C,OAAOD,cAAc;AACvB,CACF,CAAC;AAGD,MAAME,UAAU,GAAGnB,WAAW,CAAC;EAC7BoB,IAAI,EAAE,OAAO;EACbhB,YAAY;EACZiB,QAAQ,EAAE;IACR;IACAC,aAAa,EAAGC,KAAK,IAAK;MACxBA,KAAK,CAACjB,SAAS,GAAG,IAAI;MACtBiB,KAAK,CAAChB,YAAY,GAAG,IAAI;IAC3B,CAAC;IACDiB,eAAe,EAAEA,CAACD,KAAK,EAAErB,MAAM,KAAK;MAClCqB,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAAClB,KAAK,GAAGH,MAAM,CAACuB,OAAO;IAC9B,CAAC;IACDC,eAAe,EAAEA,CAACH,KAAK,EAAErB,MAAM,KAAK;MAClCqB,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAAChB,YAAY,GAAGL,MAAM,CAACuB,OAAO;IACrC,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAIA;IACAE,aAAa,EAAGJ,KAAK,IAAK;MACxBA,KAAK,CAACjB,SAAS,GAAG,IAAI;MACtBiB,KAAK,CAAChB,YAAY,GAAG,IAAI;IAC3B,CAAC;IACDqB,eAAe,EAAEA,CAACL,KAAK,EAAErB,MAAM,KAAK;MAClC,MAAM2B,WAAW,GAAG3B,MAAM,CAACuB,OAAO;MAClC,MAAMK,SAAS,GAAGP,KAAK,CAAClB,KAAK,CAAC0B,SAAS,CACpCC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKJ,WAAW,CAACI,GACrC,CAAC;MAED,IAAIH,SAAS,KAAK,CAAC,CAAC,EAAE;QACpBP,KAAK,CAAClB,KAAK,CAACyB,SAAS,CAAC,GAAGD,WAAW;QACpCN,KAAK,CAACjB,SAAS,GAAG,KAAK;QACvBiB,KAAK,CAAChB,YAAY,GAAG,IAAI;MAC3B;IACF,CAAC;IACD2B,eAAe,EAAEA,CAACX,KAAK,EAAErB,MAAM,KAAK;MAClCqB,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAAChB,YAAY,GAAGL,MAAM,CAACuB,OAAO;IACrC,CAAC;IAED;IACAU,eAAe,EAAGZ,KAAK,IAAK;MAC1BA,KAAK,CAACjB,SAAS,GAAG,IAAI;MACtBiB,KAAK,CAAChB,YAAY,GAAG,IAAI;IAC3B,CAAC;IACD6B,iBAAiB,EAAEA,CAACb,KAAK,EAAErB,MAAM,KAAK;MACpC,MAAMmC,MAAM,GAAGnC,MAAM,CAACuB,OAAO;MAC7BF,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAAClB,KAAK,GAAGkB,KAAK,CAAClB,KAAK,CAACiC,MAAM,CAAEN,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKI,MAAM,CAAC;MAC/Dd,KAAK,CAAChB,YAAY,GAAG,IAAI;IAC3B,CAAC;IACDgC,iBAAiB,EAAEA,CAAChB,KAAK,EAAErB,MAAM,KAAK;MACpCqB,KAAK,CAACjB,SAAS,GAAG,KAAK;MACvBiB,KAAK,CAAChB,YAAY,GAAGL,MAAM,CAACuB,OAAO;IACrC,CAAC;IACDe,aAAa,EAAGC,OAAO,IAAK;MAC1BA,OAAO,CACJC,OAAO,CAAClC,YAAY,CAACmC,OAAO,EAAGpB,KAAK,IAAK;QACxCA,KAAK,CAACjB,SAAS,GAAG,IAAI;QACtBiB,KAAK,CAAChB,YAAY,GAAG,IAAI;MAC3B,CAAC,CAAC,CACDmC,OAAO,CAAClC,YAAY,CAACoC,SAAS,EAAE,CAACrB,KAAK,EAAErB,MAA6B,KAAK;QACzEqB,KAAK,CAACjB,SAAS,GAAG,KAAK;QACvBiB,KAAK,CAAClB,KAAK,CAACwC,IAAI,CAAC3C,MAAM,CAACuB,OAAO,CAAC;MAClC,CAAC,CAAC,CACDiB,OAAO,CAAClC,YAAY,CAACsC,QAAQ,EAAE,CAACvB,KAAS,EAAErB,MAAU,KAAK;QAAA,IAAA6C,aAAA;QACzDxB,KAAK,CAACjB,SAAS,GAAG,KAAK;QACvBiB,KAAK,CAAChB,YAAY,GAAG,EAAAwC,aAAA,GAAA7C,MAAM,CAAC8C,KAAK,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,OAAO,KAAI,oBAAoB;MACpE,CAAC,CAAC;IACJ;EAEJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACX3B,aAAa;EACbE,eAAe;EACfE,eAAe;EACf;EACA;EACA;EACAC,aAAa;EACbC,eAAe;EACfM,eAAe;EACfC,eAAe;EACfC,iBAAiB;EACjBG;AACF,CAAC,GAAGpB,UAAU,CAAC+B,OAAO;AAEtB,eAAe/B,UAAU,CAACgC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}